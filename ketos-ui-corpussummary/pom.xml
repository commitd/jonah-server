<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <artifactId>ketos-java</artifactId>
    <groupId>io.committed.ketos</groupId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <artifactId>ketos-ui-corpussummary</artifactId>
  <name>Vessel UI Plugin</name>

  <properties>

    <nodejs.version>v8.9.0</nodejs.version>
    <yarn.version>v1.3.2</yarn.version>

  </properties>

  <dependencies>
    <dependency>
      <groupId>io.committed.vessel</groupId>
      <artifactId>vessel-plugin</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <version>1.6</version>
        <executions>
        <!-- Install node and yarn locally -->
        <!-- If you are offlien you can configure this to download from an offline server, see below -->
          <execution>
            <id>install node and yarn</id>
            <goals>
              <goal>install-node-and-yarn</goal>
            </goals>
            <phase>generate-resources</phase>
          </execution>
          <!-- Install yarn packages, note we recommend you don't do this for UI developemtn yourself, but its needed for CI -->
          <execution>
            <id>yarn install</id>
            <goals>
              <goal>yarn</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>             
              <arguments>install</arguments>
            </configuration>
          </execution>          
          <!-- Hook up yarn test to maven test -->
          <execution>
            <id>yarn test</id>
            <goals>
              <goal>yarn</goal>
            </goals>
            <phase>test</phase>
            <configuration>             
              <arguments>test:maven</arguments>
            </configuration>
          </execution>
          <!-- Build the web app -->
          <execution>
            <id>yarn build</id>
            <goals>
              <goal>yarn</goal>
            </goals>
            <configuration>
              <arguments>build</arguments>
            </configuration>
            <phase>compile</phase>
          </execution>
        </executions>
        <configuration>
          <nodeVersion>${nodejs.version}</nodeVersion>
          <yarnVersion>${yarn.version}</yarnVersion>
          <workingDirectory>src/main/js</workingDirectory>
          <!-- Pull through common JS environment variables into the Yarn environment -->
          <environmentVariables>
            <NODE_ENV>${NODE_ENV}</NODE_ENV>
            <CI>${CI}</CI>
            <PORT>${PORT}</PORT>
          </environmentVariables>
          <!-- Optional: where to download node and yarn from. -->
          <!-- <nodeDownloadRoot>http://offline_or_proxy/nodejs/</nodeDownloadRoot>  -->
          <!-- <yarnDownloadRoot>http://offline_or_proxy/yarn/</yarnDownloadRoot> -->
        </configuration>
      </plugin>
      <!-- Copy the UI build output to the resources area on the classpath -->
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.0.2</version>
        <executions>
          <execution>
            <id>copy-resources</id>
            <!-- Run the copy After the compilation, but before we package the JAR up-->
            <phase>process-classes</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${basedir}/target/classes/ui/${project.artifactId}</outputDirectory>
              <resources>          
                <resource>
                  <directory>${basedir}/src/main/js/build</directory>
                  <filtering>false</filtering>
                </resource>
              </resources>              
            </configuration>            
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

</project>
